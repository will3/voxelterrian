#version 330 core

in vec3 fragmentColor;
in vec3 fragmentNormal;
in vec4 shadowCoord;

uniform vec3 light_dir;
uniform vec3 ambient_light;
uniform sampler2D tex;
uniform bool hasShadowMap;
uniform sampler2DShadow shadowMap;

out vec3 color;

void main()
{
	float cosTheta = clamp( dot(fragmentNormal, light_dir), 0, 1 );

	vec3 ambient = ambient_light * 1.0;

	float bias = 0.005 * tan( acos(cosTheta) );
	bias = clamp(bias, 0, 0.01);

	bool test_shadow = false;

	float visibility = 1.0;

	if (hasShadowMap) {
		visibility = texture( shadowMap, vec3(shadowCoord.xy, (shadowCoord.z - bias) /shadowCoord.w) );
	}

	if (test_shadow) {
		if (visibility != 1.0) {
			color = vec3(1.0, 0.0, 0.0);
			return;
		}
	}

	color = ambient +
		fragmentColor * cosTheta * visibility;
}