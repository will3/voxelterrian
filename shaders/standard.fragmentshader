#version 330 core

in vec3 fragmentColor;
in vec3 fragmentNormal;
in vec4 shadowCoord;

uniform vec3 light_dir;
uniform vec3 ambient_light;
uniform sampler2D tex;
uniform bool hasShadowMap;
uniform sampler2DShadow shadowMap;

out vec3 color;

void main()
{
	float normalFactor = dot(fragmentNormal, light_dir);
	if (normalFactor < 0) {
		normalFactor = 0;
	}

	vec3 ambient = ambient_light;

	float bias = 0.005;
	float visibility = 1.0;
	if (hasShadowMap) {
		visibility = texture( shadowMap, vec3(shadowCoord.xy, (shadowCoord.z)/shadowCoord.w) );
	}

	color = ambient +
		fragmentColor * normalFactor * visibility;
}